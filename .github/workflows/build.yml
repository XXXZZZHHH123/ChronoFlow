name: CI/CD Pipeline
on:
  push:
    branches:
      - main
      - feature/ci
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build & JUnit & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Lint (Spotless + Checkstyle)
        run: mvn -B spotless:check checkstyle:check

      - name: Build & Run tests
        run: mvn -B clean verify

  sonarjobs:
    name: Sonar Jobs
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/test' || github.ref == 'refs/heads/feature/ci' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY:  ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization="${SONAR_ORGANIZATION}" \
          -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \

  docker_image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      DOCKERFILE_PATH: ./Dockerfile
      CONTEXT_PATH: .
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE_NAME (lowercase)
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}/app" >> $GITHUB_ENV

      - name: Set VERSION
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "VERSION=1.0.${GITHUB_RUN_NUMBER}-SNAPSHOT" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (latest + sha + version)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64
          build-args: |
            REVISION=${{ env.VERSION }}
            MODULE=system
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

#  deploy:
#    runs-on: ubuntu-latest
#    needs: docker_image
#    container: ghcr.io/railwayapp/cli:latest
#    env:
#      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
#    steps:
#      - name: Redeploy service
#        run: railway redeploy --service ${{ secrets.RAILWAY_SERVICE_ID }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker_image
    container: ghcr.io/railwayapp/cli:latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}    # 建议用 Project Token
    steps:
      - name: Redeploy service (non-interactive)
        run: railway redeploy --service ${{ secrets.RAILWAY_SERVICE_ID }} --yes